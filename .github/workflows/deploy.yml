name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - 'production'
          - 'staging'
        default: 'production'
      skip_checks:
        description: 'Skip checks (emergency only)'
        required: false
        type: boolean
        default: false

concurrency:
  group: deploy-${{ github.event.inputs.environment }}
  cancel-in-progress: false

env:
  FORCE_COLOR: 1
  NODE_OPTIONS: '--max-old-space-size=4096'
  # Build environment variables
  DATABASE_URL: postgresql://dummy:dummy@localhost:5432/dummy
  AUTH_SECRET: dummy-secret-for-build
  GEMINI_API_KEY: dummy-key-for-build
  AUTH_ORIGIN: http://localhost:3000
  RESEND_API_KEY: dummy-resend-key
  GITHUB_CLIENT_ID: dummy-github-id
  GITHUB_CLIENT_SECRET: dummy-github-secret

jobs:
  # üöÄ Deploy to target environment
  deploy:
    name: üöÄ Deploy to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Validate deployment
        run: |
          echo "üöÄ Manual Deployment Request"
          echo "============================"
          echo "üë§ Requested by: ${{ github.actor }}"
          echo "üåç Environment: ${{ github.event.inputs.environment }}"
          echo "üì¶ Commit: ${{ github.sha }}"
          echo "‚ö†Ô∏è Skip checks: ${{ github.event.inputs.skip_checks }}"
          
          if [[ "${{ github.event.inputs.skip_checks }}" == "true" ]]; then
            echo ""
            echo "üö® WARNING: Quality checks will be skipped!"
            echo "This should only be used for emergency deployments."
          fi

      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run checks
        if: github.event.inputs.skip_checks != 'true'
        run: |
          echo "üîç Running deployment checks..."
          
          # Quick quality checks
          echo "üìù Checking code quality..."
          bun run format:check
          bun run lint
          bun run typecheck
          
          # Security audit
          echo "üîç Running security audit..."
          if ! bun audit --json > audit-results.json 2>&1; then
            if jq -e '.advisories[] | select(.severity == "high" or .severity == "critical")' audit-results.json > /dev/null 2>&1; then
              echo "‚ùå High/critical vulnerabilities found - deployment blocked"
              exit 1
            fi
          fi
          
          echo "‚úÖ All checks passed"

      - name: Build application
        run: |
          echo "üèóÔ∏è Building application..."
          bun run build
          
          # Check build size
          BUILD_SIZE_MB=$(($(du -sb .next/ | cut -f1) / 1024 / 1024))
          echo "üì¶ Build size: ${BUILD_SIZE_MB}MB"
          
          if [[ "$BUILD_SIZE_MB" -gt 100 ]]; then
            echo "‚ö†Ô∏è Large build size detected (${BUILD_SIZE_MB}MB)"
            echo "Consider optimizing before deployment"
          fi

      - name: Check secrets
        run: |
          echo "üîë Validating deployment secrets..."
          
          if [[ -z "${{ secrets.VERCEL_TOKEN }}" ]]; then
            echo "‚ùå VERCEL_TOKEN not configured"
            echo ""
            echo "Required secrets for deployment:"
            echo "- VERCEL_TOKEN"
            echo "- VERCEL_ORG_ID"
            echo "- VERCEL_PROJECT_ID"
            echo ""
            echo "Add these in repository settings to enable deployments"
            exit 1
          fi
          
          echo "‚úÖ Deployment secrets configured"

      - name: Deploy
        run: |
          echo "üöÄ Deploying to ${{ github.event.inputs.environment }}..."
          echo ""
          echo "üìã Deployment Summary:"
          echo "  - Environment: ${{ github.event.inputs.environment }}"
          echo "  - Commit: ${{ github.sha }}"
          echo "  - Actor: ${{ github.actor }}"
          echo "  - Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo ""
          echo "‚úÖ Deployment will be handled by Vercel GitHub integration"
          echo "üåê Check your Vercel dashboard for deployment status"
          
          # Create deployment record
          echo "üìù Recording deployment..."

      - name: Create deployment notification
        uses: actions/github-script@v7
        with:
          script: |
            const environment = '${{ github.event.inputs.environment }}';
            const skippedChecks = '${{ github.event.inputs.skip_checks }}' === 'true';
            
            let title = `üöÄ Manual Deployment to ${environment}`;
            if (skippedChecks) title += ' ‚ö†Ô∏è';
            
            const body = `## ${title}
            
            **Deployment Details:**
            - **Environment**: ${environment}
            - **Commit**: \`${{ github.sha }}\`
            - **Deployed by**: @${{ github.actor }}
            - **Timestamp**: ${new Date().toISOString()}
            
            ${skippedChecks ? '‚ö†Ô∏è **Warning**: This deployment skipped quality checks.\n\n' : ''}**Status**: ‚úÖ Deployment initiated successfully
            
            The application will be deployed via Vercel GitHub integration.
            Check your Vercel dashboard for real-time deployment status.
            
            ---
            *Workflow: [${context.runId}](${context.payload.repository.html_url}/actions/runs/${context.runId})*`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Deployment: ${environment} (${{ github.sha }})`.substring(0, 7),
              body: body,
              labels: ['deployment', environment]
            });
        continue-on-error: true

      - name: Success notification
        run: |
          echo "üéâ Deployment Completed Successfully!"
          echo "=================================="
          echo ""
          echo "üìä Summary:"
          echo "  - Environment: ${{ github.event.inputs.environment }}"
          echo "  - Commit: ${{ github.sha }}"
          echo "  - Status: ‚úÖ Success"
          echo ""
          echo "üîó Next Steps:"
          echo "  - Monitor deployment in Vercel dashboard"
          echo "  - Verify application is working correctly"
          echo "  - Check performance metrics"

      - name: Failure notification
        if: failure()
        run: |
          echo "‚ùå Deployment Failed"
          echo "===================="
          echo ""
          echo "üîÑ Troubleshooting:"
          echo "  - Check the workflow logs above"
          echo "  - Verify all secrets are configured"
          echo "  - Ensure code quality checks pass"
          echo "  - Try again with 'skip_checks' if emergency"
          echo ""
          echo "üìö Resources:"
          echo "  - Deployment Setup: docs/DEPLOYMENT_SETUP.md"
          echo "  - Troubleshooting: Check repository settings"
