name: 'Maintenance'
description: 'Automated maintenance tasks including security audit and cleanup'
inputs:
  force-cleanup:
    description: 'Force cleanup of old resources'
    required: false
    default: 'false'
  bun-version:
    description: 'Bun version to install'
    required: false
    default: 'latest'
  cache-key:
    description: 'Additional cache key suffix'
    required: false
    default: '-maintenance'

outputs:
  critical-vulns:
    description: 'Number of critical vulnerabilities'
    value: ${{ steps.security.outputs.critical-count }}
  high-vulns:
    description: 'Number of high severity vulnerabilities'
    value: ${{ steps.security.outputs.high-count }}
  has-vulnerabilities:
    description: 'Whether any vulnerabilities were found'
    value: ${{ steps.security.outputs.has-vulnerabilities }}
  cleanup-runs:
    description: 'Number of workflow runs cleaned up'
    value: ${{ steps.cleanup.outputs.runs-deleted }}
  cleanup-artifacts:
    description: 'Number of artifacts cleaned up'
    value: ${{ steps.cleanup.outputs.artifacts-deleted }}

runs:
  using: 'composite'
  steps:
    - name: Setup Bun Environment
      uses: ./.github/actions/setup-bun
      with:
        bun-version: ${{ inputs.bun-version }}
        cache-key: ${{ inputs.cache-key }}

    - name: Security Audit
      id: security
      uses: ./.github/actions/security-audit
      with:
        fail-on-critical: 'false'
        fail-on-high: 'false'
        upload-artifacts: 'true'

    - name: Cleanup old resources
      id: cleanup
      uses: actions/github-script@v8
      with:
        script: |
          const force = '${{ inputs.force-cleanup }}' === 'true';
          const retentionDays = force ? 7 : 30;
          const artifactRetentionDays = force ? 1 : 7;
          
          console.log(`ðŸ§¹ Cleaning up resources older than ${retentionDays} days...`);
          
          const cutoffDate = new Date();
          cutoffDate.setDate(cutoffDate.getDate() - retentionDays);
          
          const artifactCutoffDate = new Date();
          artifactCutoffDate.setDate(artifactCutoffDate.getDate() - artifactRetentionDays);
          
          let runsDeleted = 0;
          let artifactsDeleted = 0;
          
          // Cleanup workflow runs
          let page = 1;
          while (page <= 3) { // Limit pages to prevent timeout
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100,
              page: page,
              status: 'completed'
            });
            
            if (runs.workflow_runs.length === 0) break;
            
            for (const run of runs.workflow_runs) {
              const runDate = new Date(run.created_at);
              
              if (runDate < cutoffDate) {
                try {
                  await github.rest.actions.deleteWorkflowRun({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    run_id: run.id
                  });
                  runsDeleted++;
                } catch (error) {
                  console.log(`Failed to delete run ${run.id}: ${error.message}`);
                }
              }
            }
            
            page++;
          }
          
          // Cleanup artifacts
          const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          for (const artifact of artifacts.artifacts) {
            const createdAt = new Date(artifact.created_at);
            
            if (createdAt < artifactCutoffDate) {
              try {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
                artifactsDeleted++;
              } catch (error) {
                console.log(`Failed to delete artifact ${artifact.name}: ${error.message}`);
              }
            }
          }
          
          console.log(`âœ… Cleaned up ${runsDeleted} old workflow runs and ${artifactsDeleted} old artifacts`);
          
          // Set outputs
          core.setOutput('runs-deleted', runsDeleted.toString());
          core.setOutput('artifacts-deleted', artifactsDeleted.toString());
